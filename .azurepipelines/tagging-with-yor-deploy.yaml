name: lz-development - tagging-with-yor - Deploy

pool: 
  vmImage: 'ubuntu-latest'

trigger:
 - none

variables:
  - group: var-terraform-backend

stages:
  - stage: Plan
    jobs:
      - job: Terraform_plan
        steps:
          - checkout: self

          - task: TerraformTaskV4@4
            name: 'terraformInit'
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: '$(AZURE_SVC_NAME)'
              backendAzureRmResourceGroupName: '$(AZURE_RESOURCE_GROUP_NAME)'
              backendAzureRmStorageAccountName: '$(AZURE_STORAGE_ACCOUNT_NAME)'
              backendAzureRmContainerName: 'tfstate'
              backendAzureRmKey: 'azure-auto-tagging-with-terratag.ado.tfstate'
              workingDirectory: '$(System.DefaultWorkingDirectory)'

          - task: Bash@3
            displayName: "Add metadata tagging using Yor"
            inputs:
              targetType: 'inline'
              workingDirectory: "$(System.DefaultWorkingDirectory)"
              script: |
                # download Yor
                curl -s -k https://api.github.com/repos/bridgecrewio/yor/releases/latest | jq '.assets[] | select(.name | contains("linux_386")) | select(.content_type | contains("gzip")) | .browser_download_url' -r | awk '{print "curl -L -k " $0 " -o yor.tar.gz"}' | sh
                tar -xf yor.tar.gz
                chmod +x yor
                ./yor --version

                # run Yor
                yor tag --directory tagging --dry-run --parsers Terraform
                yor tag --directory tagging --parsers Terraform

                # show folder contents
                ls -al

          - task: TerraformTaskV4@4
            name: 'terraformPlan'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              commandOptions: '-input=false -var-file "./terraform.tfvars" -out=tfplan'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              environmentServiceNameAzureRM: 'svcDev'

          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: '$(Build.SourcesDirectory)'
              includeRootFolder: false
              archiveType: 'tar'
              tarCompression: 'gz'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).tgz'
              replaceExistingArchive: true
              displayName: 'Create Plan Artifact'

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: '$(Build.BuildId)-tfplan'
              publishLocation: 'Container'
              displayName: 'Publish Plan Artifact'
  
  - stage: Deploy
    dependsOn: [ 'Plan' ]
    jobs:
    - deployment: Terraform_Deploy
      environment: 'development'
      continueOnError: false
      timeoutInMinutes: 600
      strategy:
       runOnce:
        deploy:
          steps:
            - checkout: none

            - task: DownloadBuildArtifacts@0
              inputs:
                artifactName: '$(Build.BuildId)-tfplan'
                displayName: 'Download Plan Artifact'

            - task: ExtractFiles@1
              inputs:
                archiveFilePatterns: '$(System.ArtifactsDirectory)/$(Build.BuildId)-tfplan/$(Build.BuildId).tgz'
                destinationFolder: "$(System.DefaultWorkingDirectory)"
                cleanDestinationFolder: false
                overwriteExistingFiles: true
                displayName: 'Extract Terraform Plan Artifact'
                
            - task: TerraformTaskV4@4
              name: 'terraformApply'
              inputs:
                provider: 'azurerm'
                command: 'apply'
                commandOptions: '-auto-approve -input=false -tfplan tfplan'
                workingDirectory: '$(System.DefaultWorkingDirectory)'
                environmentServiceNameAzureRM: 'svcDev'