# GitHub workflow to Plan & Deploy Terraform repository to Azure
name: 'Plan & Deploy auto-tagging using Terratag example to Azure'

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'philipstreet-dev'
        type: choice
        options:
          - 'ks-philipstreet'
          - 'philipstreet-dev'

#Special permissions required for OIDC authentication
permissions:
    id-token: write
    contents: read
    pull-requests: write

#These environment variables are used by the terraform azure provider to setup OIDD authenticate.
env:
    ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
    ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
    ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"

jobs:
    terraform-plan:
        name: 'Terraform Plan'
        # use selected environment parameter
        environment: ${{ inputs.environment }}
        runs-on: ubuntu-latest
        env:
          #this is needed since we are running terraform with read-only permissions
          ARM_SKIP_PROVIDER_REGISTRATION: true
        outputs:
          tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}
        defaults:
          run:
            shell: bash
    
        steps:
        # Checkout the repository to the GitHub Actions runner
        - name: Checkout
          uses: actions/checkout@v4
          with:
            fetch-depth: 0
            ref: ${{ github.head_ref }}
            
        # Install the latest version of the Terraform CLI
        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v3
          with:
            terraform_wrapper: false
    
        # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
        - name: Terraform Init
          run: |
            terraform init -input=false -no-color \
              -backend-config="resource_group_name=${{ secrets.AZURE_RG_NAME }}" \
              -backend-config="storage_account_name=${{ secrets.AZURE_SA_NAME }}" \
              -backend-config="container_name=tfstate" \
              -backend-config="key=azure-auto-tagging-with-terratag.gh.tfstate" \
              -backend-config="use_oidc=true"
    
        # Save git metadata in environment variables
        - name: Get git metatadata
          id: git-metadata
          run: |
            # execute ./scripts/get-git-metadata.sh
            source ./scripts/get-git-metadata.sh

            # export tags to Environment variable
            echo "TAGS=$TAGS" >> $GITHUB_ENV

        # Add git metadata to resources using Terratag
        - uses: env0/terratag-action@main
          with:
            tags: ${{ env.TAGS }}
            verbose: false
            dir: . 

        # Generates an execution plan for Terraform
        # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
        - name: Terraform Plan
          id: tf-plan
          run: |
            export exitcode=0
            terraform plan -var='default_subscription_id=${{ secrets.SUBSCRIPTION_ID }}' -compact-warnings -detailed-exitcode -no-color -out tfplan || export exitcode=$?
    
            echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
    
            if [ $exitcode -eq 1 ]; then
              echo Terraform Plan Failed!
              exit 1
            else
              exit 0
            fi
    
        # Save plan to artifacts
        - name: Publish Terraform Plan
          uses: actions/upload-artifact@v4
          with:
            name: tfplan
            path: tfplan
    
        # Create string output of Terraform Plan
        - name: Create String Output
          id: tf-plan-string
          run: |
            TERRAFORM_PLAN=$(terraform show -no-color tfplan)
    
            delimiter="$(openssl rand -hex 8)"
            echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
            echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
            echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo '```terraform' >> $GITHUB_OUTPUT
            echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
            echo '```' >> $GITHUB_OUTPUT
            echo "</details>" >> $GITHUB_OUTPUT
            echo "${delimiter}" >> $GITHUB_OUTPUT
    
        # Publish Terraform Plan as task summary
        - name: Publish Terraform Plan to Task Summary
          env:
            SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
          run: |
            echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
    
        # If this is a PR post the changes
        - name: Push Terraform Output to PR
          if: github.ref != 'refs/heads/main'
          uses: actions/github-script@v7
          env:
            SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
          with:
              github-token: ${{ secrets.GITHUB_TOKEN }}
              script: |
                const body = `${process.env.SUMMARY}`;
                github.rest.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: body
                })
    
    deploy-gate:
      name: 'Approgal Gate'
      needs: [terraform-plan]
      runs-on: ubuntu-latest
      defaults:
        run:
          shell: bash
      environment: deploy-gate
      steps:
        - name: wait-for-approval
          run: echo "Please approve the deployment in the GitHub UI"

    terraform-apply:
        name: 'Terraform Apply'
        environment: ${{ inputs.environment }}
        if: github.ref == 'refs/heads/main' && needs.terraform-plan.outputs.tfplanExitCode == 2
        runs-on: ubuntu-latest
        needs: [terraform-plan, deploy-gate]
        defaults:
          run:
            shell: bash

        steps:
        # Checkout the repository to the GitHub Actions runner
        - name: Checkout
          uses: actions/checkout@v4

        # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v3

        # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
        - name: Terraform Init
          run: |
            terraform init -input=false -no-color \
              -backend-config="resource_group_name=${{ secrets.AZURE_RG_NAME }}" \
              -backend-config="storage_account_name=${{ secrets.AZURE_SA_NAME }}" \
              -backend-config="container_name=tfstate" \
              -backend-config="key=azure-auto-tagging-with-terratag.gh.tfstate" \
              -backend-config="use_oidc=true"

        # Download saved plan from artifacts
        - name: Download Terraform Plan
          uses: actions/download-artifact@v4
          with:
            name: tfplan

        # Terraform Apply
        - name: Terraform Apply
          run: terraform apply -auto-approve tfplan
